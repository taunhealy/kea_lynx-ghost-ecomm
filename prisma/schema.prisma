// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  subheading  String?
  content     String
  quote       String?
  tags        String[] // Defined as an array of strings
  slug        String   @unique
  userId      String
  published   Boolean  @default(false)
  date        DateTime @default(now())
  image       String   @default("https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D")
  user        User     @relation(fields: [userId], references: [id])
  categories  Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
  products Product[] // Add this line to create the opposite relation
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  status      ProductStatus
  price       Int
  images      String[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  isFeatured  Boolean       @default(false)
  createdAt   DateTime      @default(now())
}

model Banner {
  id          String @id @default(uuid())
  title       String
  imageString String

  createdAt DateTime @default(now())
}

model Order {
  id     String @id @default(uuid())
  status String @default("pending")
  amount Int

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
}

enum ProductStatus {
  draft
  published
  archived
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    password                 String?
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?
    image         String?
    googleId      String?   @unique
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    orders        Order[]  
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
